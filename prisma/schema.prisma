// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  defaultShippingAddress Int?
  defaultBillingAddress Int?

  cartItem CartItem[]
  addresses Address[]
  Orders Order[]

  @@map("users")
}

model Address {
  id Int @id @default(autoincrement())
  lineOne String
  lineTwo String?
  city String
  country String
  pincode String
  userId Int
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

// model Product {
//   id Int @id @default(autoincrement())
//   name String
//   description String @db.Text
//   price Decimal @db.Decimal(10, 2)
//   tags String
//   cartItem CartItem[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   orders OrderProducts[]

//   @@fulltext([name, description, tags])

//   @@map("products")
// }

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String           @db.Text
  price       Decimal          @db.Decimal(10, 2)
  tags        String
  thumbnail   String           // Thumbnail image URL
  cartItem    CartItem[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  orders      OrderProducts[]
  images      ProductImage[]   // 1:N relation

  @@fulltext([name, description, tags])
  @@map("products")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

model CartItem {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_item")
}

model Order {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  netAmount Decimal
  address String  
  status OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products OrderProducts[]
  events OrderEvent[]

  @@map("order")
}

model OrderProducts{
  id Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields:[orderId], references:[id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")

}

model OrderEvent {
  id Int @id @default(autoincrement())
  orderId Int
  orders Order @relation(fields:[orderId], references:[id])
  status OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_events")
}