2.  project 
    - project setup

3.  express 
    - express setup

4.  folders 
    - Directory structure: Creating folder structure of app

5.  prisma      
    - Initialising Prisma in Express app

6.  user model  
    - Creating User model
    
7.  env
    - Environment variables

8.  routes
    - Route definitions

9.  signup 
    - User Signup System with Node.js and Prisma ORM

10. login
    -  Node.js Login System with Prisma ORM & JWT | Secure User Authentication Tutorial

11. exception handler
    -  Advanced Error Handling in Node.js with Prisma ORM | Mastering Subclasses of Error Class

12. Unprocessable entity
    -  Effortless Data Validation in Node.js with Zod & Prisma ORM | Mastering Form Validation
================================================(MAY 10)
2. project setup :

mkdir (folder name)
inside folder

npm init -y

npm i typescript --save-dev
npx tsc --init
npm i @types/node --save-dev

mkdir src
create "index.ts" in src

npm i express
npm i @types/express --save-dev
================================================(MAY 10)
3. express setup :

src/index.ts
import express from "express";

const app = express();

app.get('/',(req,res)=>{
    res.send('working')
});

app.listen(3000,()=>{console.log('app working!')})
------------------------------------------------
npm i ts-node nodemon --save-dev
------------------------------------------------
nodemon.json
{
    "watch":["src"],
    "ext":".ts,.js",
    "exec":"npx ts-node ./src/index.ts"
}
================================================(MAY 11)
4. Directory structure: Creating folder structure of app :

create these folders in "src"
-controllers
-exceptions
-middlewares
-routes
-schema

================================================(MAY 11)
5. Initialising Prisma in Express app :

npm i prisma @prisma/client

npx prisma init

(modify schema.prisma & .env) change port -> 3306
================================================(MAY 11)
6. Creating User model :
in schema.prisma
model User{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@map("users")
}

npx prisma migrate dev --name CreateUsersTable
================================================(MAY 12)
7. Environment variables:

npm i dotenv

src/secrets.ts
import dotenv from 'dotenv'
dotenv.config({path:'.env'})
export const port = process.env.port;

.env
PORT = 3000

src/index.ts
import port from secrets


================================================(MAY 13)
8. Route definitions

routes/auth.ts
import Router from express
import login from './controllers/auth'
const authRouter: Router = Router();
authRouter.get('/login',login);
export const authRouter;

controllers/auth.ts
export const login = (req,res)=>{
  res.send('working')
}

routes/index.ts
const rootRouter:Router = Router();
rootRouter.use('/auth',authRouter);
export default rootRouter;

src/index.ts
app.use('/api',rootRouter);

================================================(MAY 14)
9. User Signup System with Node.js and Prisma ORM

npm i bcrypt jsonwebtoken

controllers/auth.ts
export const signup = async (req:Request,res: Response)=>{
    const {name,email,password} = req.body;

    let user = await prismaClient.user.findFirst({where : {email} });
    if(user){
        throw Error('User already exists!')
    }
    user = await prismaClient.user.create({
        data: {
            name,
            email,
            password: hashSync(password, 10)
        }
    })
    res.json(user);
}

routes/auth.ts
authRoutes.post('/signup',signup);

index.ts
export const prismaClient:any = new PrismaClient({
    log:['query']
})

================================================(MAY 16)
10. Node.js Login System with Prisma ORM & JWT | Secure User Authentication Tutorial

controllers/auth.ts
export const login = async (req:Request,res: Response)=>{
    const {email,password} = req.body;

    let user = await prismaClient.user.findFirst({where : {email} });
    if(!user){
        throw Error('User does not exists!')
    }
    if(!compareSync(password,user.password)){
        throw Error('Invalid password!')
    }
    const token = jwt.sign({
        userId : user.id
    },JWT_SECRET)

    res.json({user,token});
}

authRoutes.post('/login',login);

secrets.ts
export const JWT_SECRET=process.env.JWT_SECRET!;

.env
JWT_SECRET = "oi87u4jrfn8238urej48eq8rue4pruw8iuu890w45u8oy"

================================================(MAY 16)
11. Advanced Error Handling in Node.js with Prisma ORM | Mastering Subclasses of Error Class

exceptions/root.ts
export httpExceptions extends Error{
  message:String,
  errorCode: errorcode,
  statusCode: number.
  errors:any
  constructor(message:string, errorCode: errorCode, statusCode: statusCode, errors:any){
    super(message)
    this.message = message
    this.errorCode = errorCode
    this.statusCode = statusCode
    this.errors = errors
  }
}
export enum ErrorCode {
  USER_NOT_FOUND = 1001,
  USER_ALREADY_EXISTS = 1002,
  INCORRECT_PASSWORD = 1003
}

exceptions/bad-requests.ts
export Class BadRequestsExceptions extends httpExceptions{
  constructor(message: string, errorCode: ErrorCode){
    super(message, errorcode, 400, null)
  }
}

instead throw error in signup of file - controllers/auth.ts
next(new BadRequestsExceptions('User already exists!',errorCode.USER_ALREADY_EXISTS))

middlewares/errors.ts
export const errorMiddleware = (error: httpExceptions, req, res, next) =>{
  res.status(error.statusCode).json({
    message: error.message,
    errorCode: error.errorCode,
    errors: error.errors
  })
}


index.ts
app.use(errorMiddleware);
================================================(MAY 17)
12. Effortless Data Validation in Node.js with Zod & Prisma ORM | Mastering Form Validation

npm i zod 

schema/users.ts
import { string, z } from 'zod';
export const SignUpSchema = z.object({
    name: z.string(),
    email: z.string().email(),
    password: z.string().min(6)
})

controllers/auth.ts
(trycatch for signup)
export const signup = async (req:Request,res: Response, next: NextFunction)=>{
    try {
        SignUpSchema.parse(req.body)
    ...
    }
    catch (err:any) {
        next(new UnprocessableEntity(err?.issues,'Unprocessable Entity', ErrorCode.UNPROCESSABLE_ENTITY))
    }
}