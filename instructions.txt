2.  project 
    - project setup

3.  express 
    - express setup

4.  folders 
    - Directory structure: Creating folder structure of app

5.  prisma      
    - Initialising Prisma in Express app

6.  user model  
    - Creating User model
    
7.  env
    - Environment variables

8.  routes
    - Route definitions

9.  signup 
    - User Signup System with Node.js and Prisma ORM

10. login
    -  Node.js Login System with Prisma ORM & JWT | Secure User Authentication Tutorial

11. exception handler
    -  Advanced Error Handling in Node.js with Prisma ORM | Mastering Subclasses of Error Class

12. Unprocessable entity
    -  Effortless Data Validation in Node.js with Zod & Prisma ORM | Mastering Form Validation

13. Generic error
    -  Mastering Generic Error Handling in Node.js & Prisma ORM | Higher Order Functions with Try and Catch

14. custom error
    -  Using custom error classes in Node.Js and Prisma

15. auth middleware and me api
    -  Node.js Authentication Middleware: Decoding JWT Tokens with Prisma ORM | Secure User Authentication

15. unauthorized
    -  Node.js Authentication Middleware: Decoding JWT Tokens with Prisma ORM | Secure User Authentication

16. user role
    -  Adding different role to Users | Node.Js and Prisma ORM

17. adminMiddleware
    -  Node.js Admin Middleware: Role-Based Access Control with Prisma ORM | Mastering Authorization

18. product routes  
    -  Finishing all product routes in E-Commerce App | NodeJs and Prisma ORM

19. zod validation 
    -  Handling ZOD Validation Errors in ExpressJs | NodeJs and Prisma ORM

20. address model
    -   Adding Address table to E-Commerce App | NodeJs and Prisma ORM

21. address controllers
    -   Managing user addresses in E-Commerce | NodeJS and Prisma ORM

22. address with auth
    -   Using auth token for user and finishing address routes | NodeJS and Prisma ORM

23. default address
    -   Updating users and using default addresses | NodeJS and Prisma ORM

24. Cart model
    -   Creating Cart model | NodeJS and Prisma ORM

25. Cart - Add, Delete
    -   Adding and Deleting items from Cart | NodeJS and Prisma ORM

26. Cart - Modify, Fetch
    -   Modifying and fetching user's cart | NodeJS and Prisma ORM
================================================(MAY 10)
2. project setup :

mkdir (folder name)
inside folder

npm init -y

npm i typescript --save-dev
npx tsc --init
npm i @types/node --save-dev

mkdir src
create "index.ts" in src

npm i express
npm i @types/express --save-dev
================================================(MAY 10)
3. express setup :

src/index.ts
import express from "express";

const app = express();

app.get('/',(req,res)=>{
    res.send('working')
});

app.listen(3000,()=>{console.log('app working!')})
------------------------------------------------
npm i ts-node nodemon --save-dev
------------------------------------------------
nodemon.json
{
    "watch":["src"],
    "ext":".ts,.js",
    "exec":"npx ts-node ./src/index.ts"
}
================================================(MAY 11)
4. Directory structure: Creating folder structure of app :

create these folders in "src"
-controllers
-exceptions
-middlewares
-routes
-schema

================================================(MAY 11)
5. Initialising Prisma in Express app :

npm i prisma @prisma/client

npx prisma init

(modify schema.prisma & .env) change port -> 3306
================================================(MAY 11)
6. Creating User model :
in schema.prisma
model User{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@map("users")
}

npx prisma migrate dev --name CreateUsersTable
================================================(MAY 12)
7. Environment variables:

npm i dotenv

src/secrets.ts
import dotenv from 'dotenv'
dotenv.config({path:'.env'})
export const port = process.env.port;

.env
PORT = 3000

src/index.ts
import port from secrets
================================================(MAY 13)
8. Route definitions

routes/auth.ts
import Router from express
import login from './controllers/auth'
const authRouter: Router = Router();
authRouter.get('/login',login);
export const authRouter;

controllers/auth.ts
export const login = (req,res)=>{
  res.send('working')
}

routes/index.ts
const rootRouter:Router = Router();
rootRouter.use('/auth',authRouter);
export default rootRouter;

src/index.ts
app.use('/api',rootRouter);

================================================(MAY 14)
9. User Signup System with Node.js and Prisma ORM

npm i bcrypt jsonwebtoken

controllers/auth.ts
export const signup = async (req:Request,res: Response)=>{
    const {name,email,password} = req.body;

    let user = await prismaClient.user.findFirst({where : {email} });
    if(user){
        throw Error('User already exists!')
    }
    user = await prismaClient.user.create({
        data: {
            name,
            email,
            password: hashSync(password, 10)
        }
    })
    res.json(user);
}

routes/auth.ts
authRoutes.post('/signup',signup);

index.ts
export const prismaClient:any = new PrismaClient({
    log:['query']
})

================================================(MAY 16)
10. Node.js Login System with Prisma ORM & JWT | Secure User Authentication Tutorial

controllers/auth.ts
export const login = async (req:Request,res: Response)=>{
    const {email,password} = req.body;

    let user = await prismaClient.user.findFirst({where : {email} });
    if(!user){
        throw Error('User does not exists!')
    }
    if(!compareSync(password,user.password)){
        throw Error('Invalid password!')
    }
    const token = jwt.sign({
        userId : user.id
    },JWT_SECRET)

    res.json({user,token});
}

authRoutes.post('/login',login);

secrets.ts
export const JWT_SECRET=process.env.JWT_SECRET!;

.env
JWT_SECRET = "oi87u4jrfn8238urej48eq8rue4pruw8iuu890w45u8oy"

================================================(MAY 16)
11. Advanced Error Handling in Node.js with Prisma ORM | Mastering Subclasses of Error Class

exceptions/root.ts
export httpExceptions extends Error{
  message:String,
  errorCode: errorcode,
  statusCode: number.
  errors:any
  constructor(message:string, errorCode: errorCode, statusCode: statusCode, errors:any){
    super(message)
    this.message = message
    this.errorCode = errorCode
    this.statusCode = statusCode
    this.errors = errors
  }
}
export enum ErrorCode {
  USER_NOT_FOUND = 1001,
  USER_ALREADY_EXISTS = 1002,
  INCORRECT_PASSWORD = 1003
}

exceptions/bad-requests.ts
export Class BadRequestsExceptions extends httpExceptions{
  constructor(message: string, errorCode: ErrorCode){
    super(message, errorcode, 400, null)
  }
}

instead throw error in signup of file - controllers/auth.ts
next(new BadRequestsExceptions('User already exists!',errorCode.USER_ALREADY_EXISTS))

middlewares/errors.ts
export const errorMiddleware = (error: httpExceptions, req, res, next) =>{
  res.status(error.statusCode).json({
    message: error.message,
    errorCode: error.errorCode,
    errors: error.errors
  })
}

index.ts
app.use(errorMiddleware);
================================================(MAY 17)
12. Effortless Data Validation in Node.js with Zod & Prisma ORM | Mastering Form Validation

npm i zod 

schema/users.ts
import { string, z } from 'zod';
export const SignUpSchema = z.object({
    name: z.string(),
    email: z.string().email(),
    password: z.string().min(6)
})

controllers/auth.ts
(trycatch for signup)
export const signup = async (req:Request,res: Response, next: NextFunction)=>{
    SignUpSchema.parse(req.body)
    ...
}

exceptions/validation.ts
export class UnprocessableEntity extends HttpException{
    constructor(error: any,message:string, errorCode: number){
        super(message, errorCode, 422, error)
    }
}

================================================(MAY 25)
13. Mastering Generic Error Handling in Node.js & Prisma ORM | Higher Order Functions with Try and Catch

src/error-handler.ts
export const errorHandler = (method: Function) => {
    return async (req: Request,res: Response,next: NextFunction) => {
        try {
            await method(req,res,next)
        } catch (error) {
            let exception: HttpException
            if(error instanceof HttpException){
                exception = error
            }
            else{
                exception = new InternalException('something went wrong!',error, ErrorCode.INTERNAL_EXCEPTION)
            }
            next(exception)
        }
    }
}

exceptions/internal-exception.ts
export class InternalException extends HttpException{
    constructor(message: string , error:any, errorCode:ErrorCode){
        super(message, errorCode, 500, error)
    }
}

exceptions/root.ts
(add "INTERNAL_EXCEPTION=3001" in enum)

routes/auth.ts
authRoutes.post('/login',errorHandler(login));
authRoutes.post('/signup',errorHandler(signup));

================================================(MAY 25)
14. Using custom error classes in Node.Js and Prisma


exceptions/not-found.ts
export class NotFoundException extends HttpException{
    constructor(message, errorCode){
        super(message, errorCode, 404, null)
    }
}

controllers/auth.ts
export const login = async (req:Request,res: Response,next:NextFunction)=>{
    const {email,password} = req.body;

    let user = await prismaClient.user.findFirst({where : {email} });
    if(!user){
        throw new NotFoundException('User not found!',ErrorCode.USER_NOT_FOUND)
    }
    if(!compareSync(password,user.password)){
        throw new BadRequestsException('Invalid password!',ErrorCode.INCORRECT_PASSWORD)
    }
    const token = jwt.sign({
        userId : user.id
    },JWT_SECRET)

    res.json({user, token});
}
================================================(MAY 27)
15. Node.js Authentication Middleware: Decoding JWT Tokens with Prisma ORM | Secure User Authentication

exceptions/unauthorized.ts
export class UnauthorizedException extends httpExceptions {
    constructor(message:string, errorCode:errorCode, errors?:any){
        super(message, errorCode, 401, errors)
    }
}

middlewares/authMiddlewares.ts
import * as jwt from 'jsonwebtoken';
const authMiddleware = (req, res, next) =>{

// 1. Extract the token from the header
const token = req.headers.authorization

// 2. if token is not present, throw unauthorized error
if(!token){
    next(new UnauthorizedException('Unauthorized', errorcode.UNAUTHORIZED))
}
try{
    // 3. if token is present, verify the token and extract the payload
    const payload = jwt.verify(token,JWT_SECRET) as any
    if(!token){
        next(new UnauthorizedException('Unauthorized', errorcode.UNAUTHORIZED))
    }

    // 4. to get the user from the payload
    const user = await prismaClient.user.findFirst({where: {id: payload.userId }})
    if(!user){
        next(new UnauthorizedException('Unauthorized', errorcode.UNAUTHORIZED))
    }

    // 5. to attach the user to the current request object 
    req.user = user
    next()
}
catch(error){
    next(new UnauthorizedException('Unauthorized', errorcode.UNAUTHORIZED))
}
}
export default authMiddleware

src/@types/express/index.d.ts
import { User } from "@prisma/client";
declare global{
    namespace Express {
        interface Request {
            user: User
        }
    }
}

controllers/auth.ts
export const me = async(req: Request, res: Response) => {
    res.json(req.user)
}

routes/auth.ts
authRoutes.get('/me',[authMiddleware],errorHandler(me))
================================================(June 02)
16. Adding different role to Users | Node.Js and Prisma ORM

schema.prisma
enum Role{
    ADMIN
    USER
}
(add "role Role @default(USER)")

npx prisma migrate dev --name AddRolesToUser

npx prisma studio
================================================(June 02)
17. Node.js Admin Middleware: Role-Based Access Control with Prisma ORM | Mastering Authorization
prisma/schema.prisma
model Product {
  id Int @id @default(autoincrement())
  name String
  description String @db.Text
  price Decimal @db.Decimal(10, 2)
  tags String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

npx prisma migrate dev --name CreateProductTable

middlewares/admin.ts
const adminMiddleware:any = async (req: Request, res: Response, next: NextFunction) => {
  const user = req.user;
  if(user.role === 'ADMIN'){
    next()
  }
  else{
    next(new UnauthorizedException('Unauthorized', ErrorCode.UNAUTHRIZED));
  }
};

controllers/products
export const createProduct = async (req:Request,res: Response,next:NextFunction)=>{
    const product = await prismaClient.product.create({data: {
        ...req.body,
        tags: req.body.tags.join(',')
    }})
    res.json(product)
}

routes/product
const productRoutes = Router();
productRoutes.post('/',[authMiddleware,adminMiddleware],errorHandler(createProduct))

routes/index
rootRouter.use('/product',productRoutes);
================================================(June 03)
18. Finishing all product routes in E-Commerce App | NodeJs and Prisma ORM

export const updateProduct = async (req:Request,res: Response,next:NextFunction)=>{
    try {
        let product = req.body;
        if(product.tags){
            product.tags = product.tags.join(',')
        }
        const updateProduct = await prismaClient.product.update({
            where:{
                id: +req.params.id
            },
            data: product 
        })
        res.json(updateProduct)
    } catch (error) {
        throw new NotFoundException('product not found', ErrorCode.PRODUCT_NOT_FOUND)
    }
}
export const deleteProduct = async (req:Request,res: Response,next:NextFunction)=>{
}
export const listProduct = async (req:Request,res: Response,next:NextFunction)=>{
    const count = await prismaClient.product.count();
    const products = await prismaClient.product.findMany({
        skip: Number(req.query.skip) || 0,
        take: 5
    });
    res.json({
        count, data:products
    })
}
export const getProductById = async (req:Request,res: Response,next:NextFunction)=>{
    try {
        const product = await prismaClient.product.findFirstOrThrow({
            where: {
                id:+req.params.id
            }
        })
        res.json(product)
    } catch (error) {
        throw new NotFoundException('product not found', ErrorCode.PRODUCT_NOT_FOUND)
    }
}

routes/product.ts
productRoutes.post('/',[authMiddleware,adminMiddleware],errorHandler(createProduct))
productRoutes.get('/:id',[authMiddleware,adminMiddleware],errorHandler(getProductById))
productRoutes.put('/:id',[authMiddleware,adminMiddleware],errorHandler(updateProduct))
productRoutes.delete('/:id',[authMiddleware,adminMiddleware],errorHandler(deleteProduct))
productRoutes.get('/',[authMiddleware,adminMiddleware],errorHandler(listProduct))


================================================(June 03)
19. Handling ZOD Validation Errors in ExpressJs | NodeJs and Prisma ORM

src/errorHandler
catch (error) {
            let exception: HttpException
            if(error instanceof HttpException){
                exception = error
            }
            else{
                if(error instanceof ZodError){
                    exception = new UnprocessableEntity('Unprocessable entity.',ErrorCode.UNPROCESSABLE_ENTITY,error)
                }
                else{
                    exception = new InternalException('something went wrong!',error, ErrorCode.INTERNAL_EXCEPTION)
                }
            }
            next(exception)
        }


================================================(June 04)
20. Adding Address table to E-Commerce App | NodeJs and Prisma ORM

schema.prisma
model Address {
  id Int @id @default(autoincrement())
  lineOne String
  lineTwo String?
  city String
  country String
  pincode String
  userId Int
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
(add 'Addresses Address[]' in user model)


================================================(June 04)
21.  Managing user addresses in E-Commerce | NodeJS and Prisma ORM

controllers/address
export const addAddress = async(req:Request, res: Response) =>{
    AddressSchema.parse(req.body)
    const address = await prismaClient.address.create({
        data: {
            ...req.body, 
            userId: req.user.id
        }
    })
    res.json(address)
}

routes/users
const userRoutes = Router();
userRoutes.post('/address', [authMiddleware], errorHandler(addAddress))
userRoutes.delete('/address/:id', [authMiddleware], errorHandler(deleteAddress))
userRoutes.get('/address', [authMiddleware], errorHandler(listAddress))

schema/users.ts
export const AddressSchema = z.object({
    lineOne: z.string(),
    lineTwo: z.string().nullable(),
    pincode: z.string().length(6),
    country: z.string(),
    city: z.string(),
})
================================================(June 04)
22. Using auth token for user and finishing address routes | NodeJS and Prisma ORM

controllers/auth.ts
export const deleteAddress = async(req:Request, res: Response) =>{
    try {
        await prismaClient.address.delete({
            where : {
                id: +req.params.id
            }
        }) 
        res.json({success:true})
    } catch (error) {
        throw new NotFoundException('Address not found',ErrorCode.ADDRESS_NOT_FOUND)
    }
}
export const listAddress = async(req:Request, res: Response) =>{
    const addresses = await prismaClient.address.findMany({
        where: {
            userId: req.user.id
        }
    })
    res.json(addresses) 
}

================================================(June 04)
23. Updating users and using default addresses | NodeJS and Prisma ORM

prisma/schema.prisma
(
defaultShippingAddress Int?
defaultBillingAddress Int?
) add this in user model

schema/users.ts
export const UpdateUserSchema =z.object({
    name: z.string().optional(),
    defaultShippingAddress: z.number().nullable(),
    defaultBillingAddress: z.number().nullable()
})

export const updateUser = async(req:Request, res: Response) =>{
    const validatedData = req.body
    let shippingAddress: Address;
    let billingAddress: Address;
    if(validatedData.defaultShippingAddress){
        try {
            shippingAddress = await prismaClient.address.findFirstOrThrow({
                where: {
                    id: validatedData.defaultShippingAddress
                }
            })
        } catch (error) {
            throw new NotFoundException('Address not found.',ErrorCode.ADDRESS_NOT_FOUND)
        }
        if(shippingAddress.userId != req.user.id){
            throw new BadRequestsException('Address does not belong to user.',ErrorCode.ADDRESS_DOES_NOT_BELONG)
        }
    }
    if(validatedData.defaultBillingAddress){
        try {
            billingAddress = await prismaClient.address.findFirstOrThrow({
                where: {
                    id: validatedData.defaultBillingAddress
                }
            })
        } catch (error) {
            throw new NotFoundException('Address not found.',ErrorCode.ADDRESS_NOT_FOUND)
        }
        if(billingAddress.userId != req.user.id){
            throw new BadRequestsException('Address does not belong to user.',ErrorCode.ADDRESS_DOES_NOT_BELONG)
        }
    }
    
    const updatedUser = await prismaClient.user.update({
        where: {
            id: +req.user.id
        },
        data: validatedData
    })
    res.json(updatedUser)
}

================================================(June 04)
24. Creating Cart model | NodeJS and Prisma ORM

prisma/schema.prisma
model CartItem {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_item")
}

(cartItem CartItem[]) add this in product, user model


================================================(June 04)
25. Cart - Add, Delete
    -   Adding and Deleting items from Cart | NodeJS and Prisma ORM

controllers/cart
export const addItemToCart= async(req: Request, res: Response)=>{
    //check for existance of the product and in user's cart and alter the quantity as required
    const validateData = CreateCartSchema.parse(req.body)
    let product: Product
    try {
        product = await prismaClient.product.findFirstOrThrow({
            where: {
                id: validateData.productId
            }
        })
    } catch (error) {
        throw new NotFoundException('Product not found',ErrorCode.PRODUCT_NOT_FOUND)
    }
    //find user have cartItem with product id
    let cartProductItem:CartItem
    cartProductItem = await prismaClient.cartItem.findFirst({
        where: {
            userId: req.user.id,
            productId: product.id,
        }
    })
    let cart: CartItem
    if(cartProductItem){
        cart = await prismaClient.cartItem.update({
            where: {
                id: cartProductItem.id
            },
            data: {
                quantity: validateData.quantity
            }
        })
    }
    else{
        cart = await prismaClient.cartItem.create({
            data: {
                userId: req.user.id,
                productId: product.id,
                quantity: validateData.quantity
            }
        })
    }
    res.json(cart)
}
export const deleteItemFromCart= async(req: Request, res: Response)=>{
    //check user is deleting its own cart item - done
    await prismaClient.cartItem.delete({
        where: {
            id: +req.params.id
        }
    })
    res.json({success:true})
}


================================================(June 04)
26. Cart - Modify, Fetch
    -   Modifying and fetching user's cart | NodeJS and Prisma ORM

controllers/cart
export const changeQuantity= async(req: Request, res: Response)=>{
    const validateData = ChangeQuantitySchema.parse(req.body)

    try {
        const updatedCart = await prismaClient.cartItem.update({
            where: {
                id: +req.params.id,
                userId: req.user.id
            },
            data: {
                quantity: validateData.quantity
            }
        })
        res.json(updatedCart)
    } catch (error) {
        throw new NotFoundException('Cart not found',ErrorCode.PRODUCT_NOT_FOUND)
    }
}
export const getCart= async(req: Request, res: Response)=>{
    try {
        const cartItems = await prismaClient.cartItem.findMany({
            where: {
                userId: req.user.id
            },
            include: {
                product: true
            }
        })
        res.json(cartItems)
    } catch (error) {
        throw new NotFoundException('Cart not found',ErrorCode.PRODUCT_NOT_FOUND)
    }
}
================================================(June 06)
27. Creating Orders table | NodeJS and Prisma ORM

schema.prisma
model Order {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  netAmount Decimal
  address String  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products OrderProducts[]
  events OrderEvent[]
  @@map("order")
}
model OrderProducts{
  id Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields:[orderId], references:[id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("order_products")
}
model OrderEvent {
  id Int @id @default(autoincrement())
  orderId Int
  orders Order @relation(fields:[orderId], references:[id])
  orderEventStatus OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("order_events")
}

controllers/orders
export const createOrder= async(req: Request, res: Response)=>{
    try {
        return await prismaClient.$transaction(async (tx:any) => {
            const cartItems = await tx.cartItem.findMany({
                where: {
                    userId: req.user.id
                },
                include: {
                    product: true
                }
            })
            console.log(cartItems)
    
            if(cartItems.length ==0){
                return res.json({message:'cart is empty.'})
            }
    
            const price = cartItems.reduce((prev,current)=>{
                return prev + (current.quantity * +current.product.price)
            },0)
    
            console.log('total:',price)
    
            const address = await tx.address.findFirst({
                where: {
                    id: req.user.defaultShippingAddress
                }
            })
            
            const order = await tx.order.create({
                data: {
                    userId:req.user.id,
                    netAmount: price,
                    address: address.formattedAddress,
                    products: {
                        create: cartItems.map(cart=>{
                            return {
                                productId : cart.productId,
                                quantity: cart.quantity
                            }
                        })
                    }
                }
            })
    
            const orderEvent = await tx.orderEvent.create({
                data: {
                    orderId: order.id
                }
            })
    
            await tx.cartItem.deleteMany({
                where: {
                    userId: req.user.id
                }
            })
    
            return res.json(order)
        })
    } catch (error) {
        console.log(error)
        throw error
    }
}

routes/orders
orderRoutes.post('/',[authMiddleware],errorHandler(createOrder))
orderRoutes.get('/',[authMiddleware],errorHandler(listOrders))
orderRoutes.put('/:id/cancel',[authMiddleware],errorHandler(cancelOrder))
orderRoutes.get('/:id',[authMiddleware],errorHandler(getOrderById))

index.ts
export const prismaClient:any = new PrismaClient({
    log:['query']
}).$extends({
    result: {
        address: {
            formattedAddress :{
                needs: {
                    lineOne: true,
                    lineTwo: true,
                    city: true,
                    country: true,
                    pincode: true
                },
                compute: ((addr)=>{
                    return `${addr.lineOne}, ${addr.lineTwo}, ${addr.city}, ${addr.country}-${addr.pincode}`
                })
            }
        }
    }
})

================================================(June 12)
28. placing order from users cart

================================================(June 12)
29. Storing current order status | NodeJS and Prisma ORM

add "status OrderEventStatus @default(PENDING)" in order model

================================================(June 12)

30. Finishing all order routes | NodeJS and Prisma ORM
export const listOrders= async(req: Request, res: Response)=>{
    const orders = await prismaClient.order.findMany({
        where:{
            userId: req.user.id
        }
    })
    res.json(orders)
}
export const cancelOrder= async(req: Request, res: Response)=>{

        return await prismaClient.$transaction(async (tx:any)=>{
            const order = await tx.order.update({
                where:{
                    id: +req.params.id
                },
                data: {
                    status: 'CANCELLED'
                }
            });
    
            await tx.orderEvent.create({
                data: {
                    orderId: order.id,
                    status: 'CANCELLED'
                }
            })
    
            return res.json(order)
        })
}
export const getOrderById= async(req: Request, res: Response)=>{
    try {
        const order = await prismaClient.order.findFirstOrThrow({
            where: {
                id: +req.params.id
            },
            include:{
                products:true,
                events:true
            }
        });
        res.json(order)
    } catch (error) {
        throw new NotFoundException('order not found', ErrorCode.ORDER_NOT_FOUND)
    }
}
================================================(June 13)
31. Woking on admin functionality for Users in E-Commerce | NodeJS and Prisma ORM

controllers/users
export const listUser = async(req:Request, res: Response) =>{
    const users = await prismaClient.user.findMany({
        skip: +req.query.skip || 0,
        take: 5
    })

    res.json(users)
}
export const getUserById = async(req:Request, res: Response) =>{
    try {
        const user = await prismaClient.user.findFirstOrThrow({
            where:{
                 id: +req.params.id
            },
            include: {
                addresses: true
            }
        })
        res.json(user)
    } catch (error) {
        throw new NotFoundException('user not found.', ErrorCode.USER_NOT_FOUND)
    }
}
export const changeUserRole = async(req:Request, res: Response) =>{
     try {
        const user = await prismaClient.user.update({
            where:{
                 id: +req.params.id
            },
            data: {
                role: req.body.role
            }
        })
        res.json(user)
    } catch (error) {
        throw new NotFoundException('user not found.', ErrorCode.USER_NOT_FOUND)
    }
}

================================================(June 13)
32. Woking on admin functionality for Orders in E-Commerce | NodeJS and Prisma ORM

export const listAllOrders = async(req:Request, res: Response)=> {
    let whereClause = {}
    const status = req.query.status
    if(status){
        whereClause = {
            status
        }
    }
    const orders = await prismaClient.order.findMany({
        where: whereClause,
        skip: +req.query.skip ||  0,
        take: 5
    })
    res.json(orders)
}
export const changeStatus = async(req:Request, res: Response)=> {
    return await prismaClient.$transaction(async (tx:any)=>{
        try {
            const order = await tx.order.update({
            where: {
                id: +req.params.id
            },
            data: {
                status: req.body.status
            }
        })

        await tx.orderEvent.create({
            data: {
                orderId: order.id,
                status: req.body.status
            }
        })

        return res.json(order)
        } catch (error) {
            throw new NotFoundException('order not found', ErrorCode.ORDER_NOT_FOUND)
        }
    })
}
export const listUserOrders = async(req:Request, res: Response)=> {
    let whereClause:any = {
        userId: +req.params.id
    }
    const status = req.query.status
    if(status){
        whereClause = {
            ...whereClause,
            status
        }
    }
    const orders = await prismaClient.order.findMany({
        where: whereClause,
        skip: +req.query.skip ||  0,
        take: 5
    })
    res.json(orders)
}